<!doctype html>
<html lang="pt-br">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>MCA-OMAD ‚Äì Guia Di√°rio (Fase III) ‚Ä¢ v1.8 (TESTE FINAL)</title>
<meta name="theme-color" content="#0f3b66">
<link rel="manifest" href="manifest.webmanifest">
<script src="https://unpkg.com/@supabase/supabase-js@2"></script> 

<style>
  :root{
    --bg:#ffffff; --text:#111418; --muted:#6b7280; --card:#f7f8fa; --line:#e5e7eb;
    --blue:#CFE4F7; --green:#E5F4E3; --peach:#FFEFD6; --steel:#E8ECF2; --lilac:#F1ECF9; --gold:#FFF5CC;
    --accent:#0f3b66; --off:#f2f3f5; --highlight:#e0f2fe; --good:#16a34a; --warn:#d97706; --bad:#dc2626;
  }
  html,body{margin:0;padding:0;background:var(--bg);color:var(--text);font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Helvetica,Arial,sans-serif}
  header{position:sticky;top:0;background:linear-gradient(180deg,#ffffff 60%, #fafbfc 100%);border-bottom:1px solid var(--line);padding:12px;z-index:10; display:flex; align-items:center; justify-content:space-between; gap:12px; flex-wrap:wrap}
  header h1{font-size:18px;margin:0;color:var(--accent);}
  header p{margin:2px 0 0 0;font-size:12px;color:#6b7280}
  .toolbar{display:flex; gap:8px; align-items:center; flex-wrap:wrap}
  .btn{white-space:nowrap; font-size:13px; padding:8px 12px; border-radius:10px; border:1px solid #cbd5e1; background:#ffffff; color:#0f3b66; cursor:pointer}
  .btn:hover{background:#f3f4f6}
  .chip{font-size:12px; padding:6px 10px; border-radius:999px; border:1px solid #cbd5e1; background:#ffffff; color:#0f3b66; }
  .week-btn.active, .mode-btn.active{background:#0f3b66; color:#fff; border-color:#0f3b66}
  .wrap{padding:14px;max-width:980px;margin:0 auto}
  .card{background:var(--card);border:1px solid var(--line);border-radius:14px;margin:12px 0;overflow:hidden}
  .band{padding:10px 12px;font-weight:700;display:flex;justify-content:space-between;align-items:center}
  .band small{font-weight:600;color:#374151}
  .inner{padding:10px 12px}
  table{width:100%;border-collapse:separate;border-spacing:0}
  th,td{padding:8px 6px;font-size:14px;text-align:center;border-bottom:1px solid #edf0f3}
  th{font-size:13px;color:#111418;background:#fff}
  td:first-child, th:first-child{text-align:left}
  .obs{font-size:12px;color:#374151;text-align:left}
  .meta-dia{font-size:12px;font-style:italic;color:#374151;margin:6px 2px 2px}
  .foot{margin:20px 0 80px;color:#374151;font-size:12px;text-align:center}
  .pill{font-size:11px;padding:2px 8px;border-radius:999px;border:1px solid #d1d5db;background:#fff;color:#111827}
  .manha .band{background:var(--blue)}
  .omad .band{background:var(--green)}
  .pre .band{background:var(--peach)}
  .pos .band{background:var(--steel)}
  .noite .band{background:var(--lilac)}
  .avancado .band{background:var(--gold)}
  input[type=checkbox]{width:18px;height:18px}
  .off{background:var(--off); color:#9aa1a9}
  .today{background:var(--highlight) !important}
  .hidden{display:none !important}
  .carousel{display:flex; gap:6px; align-items:center}
  .carousel .btn{padding:6px 10px}
  .summary{display:flex; gap:10px; flex-wrap:wrap; align-items:center; padding:10px 12px; background:#fff; border:1px solid var(--line); border-radius:12px}
  .summary .kpi{display:flex; gap:6px; align-items:center; font-size:14px; padding:6px 10px; border-radius:10px; background:#f8fafc; border:1px solid #e5e7eb}
  .bar{height:10px; background:#e5e7eb; width:220px; border-radius:999px; overflow:hidden}
  .bar>div{height:100%}
  .g{background:var(--good)} .y{background:var(--warn)} .r{background:var(--bad)}
  .chart{display:flex; gap:8px; align-items:flex-end; height:80px; padding:8px 0}
  .chart .col{width:22px; background:#e5e7eb; border-radius:6px; position:relative; overflow:hidden}
  .chart .col>div{position:absolute; bottom:0; left:0; right:0; background:#0f3b66}
  .chart .lab{font-size:11px; color:#374151; text-align:center}
  .note{font-size:12px; color:#374151; margin-top:6px}
  @media print{ .toolbar{display:none !important} header{position:static} }
</style>
</head>
<body>
<header>
  <div>
    <h1>MCA-OMAD ‚Äì Guia Di√°rio (Fase III) ‚Ä¢ v1.8</h1>
    <p>Per√≠odo-alvo: 19/10 ‚Üí 08/11/2025 ¬∑ D<span id="dnum">?</span>/21 ¬∑ <span id="modeLabel">Semana</span> <span id="wlabel">?</span> (<span id="dateLabel">‚Äì</span>)</p>
  </div>
  <div class="toolbar">
    <span class="chip" id="todayChip">Hoje: ‚Äî</span>
    <span class="chip" id="syncStatus">üîÑ Sincronize</span>
    <button class="btn" id="syncNowBtn">üíæ Sincronizar Agora</button>
    <button class="btn" onclick="window.print()">üìÑ Exportar PDF</button>
    <button class="btn" id="installBtn" style="display:none">‚ûï Instalar</button>
    <button class="btn mode-btn" data-mode="semana">Vis√£o: Semana</button>
    <div class="carousel hidden" id="dayCarousel">
      <button class="btn" id="prevDay">‚óÄ</button>
      <span class="chip" id="dayLabel">‚Äî</span>
      <button class="btn" id="nextDay">‚ñ∂</button>
    </div>
    <button class="btn mode-btn" data-mode="dia">Vis√£o: Dia</button>
    <button class="btn week-btn" data-week="1">Semana 1</button>
    <button class="btn week-btn" data-week="2">Semana 2</button>
    <button class="btn week-btn" data-week="3">Semana 3</button>
    <button class="btn" id="resetBtn">‚ôª Resetar</button>
  </div>
</header>

<div class="wrap">

  <section class="summary" id="summary">
    <div class="kpi">Hoje: <strong id="sumDay">‚Äî</strong></div>
    <div class="kpi">Feitos: <strong id="doneCount">0</strong> / <span id="totalCount">0</span></div>
    <div class="kpi">
      Ades√£o hoje:
      <div class="bar"><div id="barFill" style="width:0%"></div></div>
      <strong id="pct">0%</strong>
    </div>
  </section>

  <section class="card" id="chartCard">
    <div class="band">üìä Ades√£o semanal</div>
    <div class="inner">
      <div class="chart" id="chart"></div>
      <div style="display:flex; justify-content:space-between">
        <div class="lab">Dom</div><div class="lab">Seg</div><div class="lab">Ter</div><div class="lab">Qua</div><div class="lab">Qui</div><div class="lab">Sex</div><div class="lab">S√°b</div>
      </div>
    </div>
  </section>

  <div id="protocol-container">
    </div>
  
  <div style="text-align:center; margin-top: 20px;">
    <button class="btn hidden" id="generateRecipeBtn" onclick="requestGeminiSuggestion()">‚ú® Sugerir Refei√ß√£o OMAD (IA)</button>
  </div>

  <div class="foot">
    <div><strong>Metas at√© 08/11/2025:</strong> Peso ‚â§ 85 kg ¬∑ Massa magra ‚â• 36 kg ¬∑ HDL ‚â• 50 mg/dL ¬∑ T3 Livre ‚â• 3,3 pg/mL ¬∑ Sono ‚â• 7 h</div>
    <div style="margin-top:6px;color:#6b7280">Edi√ß√£o Cient√≠fica GPT-5 ‚Äì Editor Assistente de M√°rcio G. A. Cabral</div>
  </div>

</div>

<script>
// ========== CONFIGURA√á√ïES ==========
const SUPABASE_URL = "https://srmavbuaarejrqlibyha.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNybWF2YnVhYXJlanJxbGlieWhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA4NzUzNjIsImV4cCI6MjA3NjQ1MTM2Mn0.LpKRrGABJWE3cgnQI5eShlYlKwyS_NUp1To7FPhJ1sQ";
const sb = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
const PROFILE_ID = "marcio";
const tz = Intl.DateTimeFormat().resolvedOptions().timeZone || 'America/Belem';

// Per√≠odo-alvo fixo do ciclo
const start = new Date('2025-10-19T12:00:00'); // 12h evita erro de virada fuso
const end   = new Date('2025-11-08T12:00:00');
const msPerDay = 86400000;
const weekdays = ['Dom','Seg','Ter','Qua','Qui','Sex','S√°b'];
const classMap  = ['col-dom','col-seg','col-ter','col-qua','col-qui','col-sex','col-sab'];

// NOVO: Fun√ß√µes de Data Simples (compara apenas o dia, ignorando o hor√°rio)
function dateOnly(d) { return new Date(d.getFullYear(), d.getMonth(), d.getDate()); }
function isDateBefore(d1, d2) {
    return dateOnly(d1).getTime() < dateOnly(d2).getTime();
}

// ========== DADOS DO PROTOCOLO (JSON) - COM DATAS DE IN√çCIO ==========
const ADVANCED_START_DATE = '2025-10-26';

const PROTOCOL_DATA = {
  manha: {
    title: 'üåÖ Manh√£',
    meta: '06:30‚Äì09:00',
    meta_dia: 'Ativar metabolismo e lip√≥lise matinal mantendo foco mental e estabilidade energ√©tica.',
    items: [
      { name: 'GH (Genryzon)', obs: 'Dom 1,5 mg ¬∑ Ter/Qui 1,0 mg ¬∑ Aplicar ao acordar, <b>jejum absoluto</b>.', schedule: [1, 0, 1, 0, 1, 0, 0] },
      { name: 'Caf√© + C8', obs: '10 mL C8 no caf√© preto (manh√£). Opcional 5 mL √† tarde.', schedule: [1, 1, 1, 1, 1, 1, 1] },
      { name: 'Vitamina D3 + K2 (4 gotas)', obs: '<b>Mesmos dias do GH</b> (Dom/Ter/Qui). Tomar <b>30‚Äì60 min</b> ap√≥s o GH, com caf√© + 10 mL C8.', schedule: [1, 0, 1, 0, 1, 0, 0] },
      { name: 'Liberdya (Venvanse gotas)', obs: 'Dose habitual prescrita ¬∑ ap√≥s caf√© + C8.', schedule: [1, 1, 1, 1, 1, 1, 1] },
      { name: '√îmega-3 (Sports Research)', obs: '2 c√°psulas manh√£ <b>Seg‚ÄìSex</b>; <b>S√°bado opcional</b>. Domingo <b>off</b>.', schedule: [0, 1, 1, 1, 1, 1, 2] }, // 2 para opcional
      { name: 'Astaxantina', obs: '12 mg manh√£ <b>Seg‚ÄìSex</b>. S√°bado e Domingo <b>off</b>.', schedule: [0, 1, 1, 1, 1, 1, 0] },
      { name: 'Hidrolift', obs: '250 mL manh√£ (¬Ω sach√™). +500 mL no pr√©-treino em dias de treino.', schedule: [1, 1, 1, 1, 1, 1, 1] },
    ]
  },
  omad: {
    title: '‚òÄÔ∏è OMAD / Almo√ßo',
    meta: '13:00',
    meta_dia: 'Promover anabolismo limpo e saciedade plena com densidade nutricional m√°xima.',
    items: [
      { name: 'Carnes nobres + queijo', obs: 'Total 450‚Äì500 g (ex.: picanha, maminha, cupim) + 80‚Äì100 g de queijo.', schedule: [1, 1, 1, 1, 1, 1, 1] },
      { name: 'Verduras + batatas baby', obs: 'Verduras 100 g + azeite 10 mL ¬∑ 3 batatas pequenas (~80 g).', schedule: [1, 1, 1, 1, 1, 1, 1] },
      { name: 'CoQ10 (Ubiquinol 100 mg)', obs: 'Tomar com refei√ß√£o <b>Seg‚ÄìSex</b>. S√°bado e Domingo <b>off</b>.', schedule: [0, 1, 1, 1, 1, 1, 0] },
    ]
  },
  pre: {
    title: 'üî• Pr√©-treino',
    meta: '18:00‚Äì18:30',
    meta_dia: 'Preparar o corpo para desempenho e expans√£o muscular preservando cetose funcional.',
    items: [
      { name: 'Palatinose 10 g', obs: 'Dissolver em √°gua 20‚Äì30 min antes.', schedule: [0, 1, 1, 1, 1, 1, 1] },
      { name: 'Creatina 5‚Äì6 g', obs: 'Pode ir no mesmo copo da palatinose. Em dia sem treino: tomar √† noite.', schedule: [0, 1, 1, 1, 1, 1, 1] },
      { name: 'Acetyl-L-Carnitine 500 mg', obs: '15‚Äì20 min antes do treino. Energia mitocondrial + foco.', schedule: [0, 1, 1, 1, 1, 1, 1] },
      { name: 'Hidrolift 500 mL', obs: '1 sach√™ completo (eletr√≥litos + vitamina C).', schedule: [0, 1, 1, 1, 1, 1, 1] },
      { name: 'Tadalafila 10 mg', obs: 'Uso apenas no <b>s√°bado</b>, se desejado.', schedule: [0, 0, 0, 0, 0, 0, 2] },
    ]
  },
  pos: {
    title: 'üí™ P√≥s-treino / Ceia',
    meta: '20:00‚Äì21:00',
    meta_dia: 'Otimizar s√≠ntese proteica e recupera√ß√£o tecidual, restaurando glicog√™nio sem inflamar.',
    items: [
      { name: 'Shake: BodyBalance + Whey', obs: 'Prote√≠na total 30‚Äì35 g ¬∑ + morango (6‚Äì8) e goiaba (1‚Äì2).', schedule: [1, 1, 1, 1, 1, 1, 1] },
      // NOVO: Adiciona a data de in√≠cio real para desativar a linha antes de 26/out.
      { name: 'Inulina / FOS', obs: '2‚Äì3 g em dias alternados (Dom/ Ter/ Qui/ S√°b <b>ap√≥s 26/out</b>). Misturar no shake.', schedule: [1, 0, 1, 0, 1, 0, 1], start_date: ADVANCED_START_DATE, title: 'Ativo a partir de 26/out' },
    ]
  },
  noite: {
    title: 'üåô Noturno',
    meta: '21:00‚Äì22:30',
    meta_dia: 'Induzir relaxamento profundo e reparo celular com alinhamento do eixo GH-GABA-sono.',
    items: [
      { name: 'Magnesium Breakthrough (BiOptimizers)', obs: '1 c√°psula √†s ~21h. Evitar usar junto do caf√©.', schedule: [1, 1, 1, 1, 1, 1, 1] },
      { name: 'GABA + Melatonina', obs: 'Dose habitual. Tomar 15‚Äì30 min antes de deitar.', schedule: [1, 1, 1, 1, 1, 1, 1] },
    ]
  },
  avancado: {
    title: '‚ö° Avan√ßado (a partir de <b>26/out</b>)',
    meta: '<span class="pill">in√≠cio 26/out</span>',
    meta_dia: 'Ativar rotas mitocondriais e sinaliza√ß√£o redox com foco em longevidade celular.',
    note: '‚ö†Ô∏è Refeed: <b>26/out</b> e <b>09/nov</b> ‚Äì <span class="pill">at√© 100 g</span> de carbo limpo (batata, arroz integral, burrata, frutas).',
    items: [
      // NOVO: Adiciona a data de in√≠cio real para desativar a linha antes de 26/out.
      { name: 'R-ALA Cyclodextrin 500 mg', obs: 'Tomar 15‚Äì20 min ap√≥s o GH (Seg‚ÄìSex).', schedule: [0, 1, 1, 1, 1, 1, 0], start_date: ADVANCED_START_DATE },
      { name: 'Methyl Charge+ (sublingual)', obs: '1 pump manh√£ + 1 pump noite (di√°rio a partir de 26/out).', schedule: [1, 1, 1, 1, 1, 1, 1], start_date: ADVANCED_START_DATE },
    ]
  }
};

// ===== Estado persistente (localStorage) =====
const STORE_KEY = 'mca_omad_v17';
function loadState(){ try{ return JSON.parse(localStorage.getItem(STORE_KEY))||{} }catch(_){ return {} } }
function saveState(o){ localStorage.setItem(STORE_KEY, JSON.stringify(o)) }
let state = loadState();
if(!state.checks) state.checks = {}; // { key: true }
if(!state.ui) state.ui = {};         // { mode, selectedDateISO, week }

// ===== Datas iniciais & modo =====
function todayLocalNoon(){
  const d = new Date(); d.setHours(12,0,0,0); return d;
}
const now = todayLocalNoon();

// L√ìGICA DE INICIALIZA√á√ÉO CORRIGIDA:
// Se o modo for 'dia', respeite a data salva. Em todos os outros casos, use HOJE (now).
let selectedDate;

if (state.ui.mode === 'dia' && state.ui.selectedDateISO) {
    // Se a √∫ltima vis√£o era 'Dia', respeite a data salva.
    selectedDate = new Date(state.ui.selectedDateISO);
} else {
    // Caso contr√°rio (Vis√£o 'Semana' ou primeira carga), use HOJE.
    selectedDate = now;
}

// Garante que selectedDate esteja dentro do ciclo
selectedDate = new Date(Math.min(Math.max(selectedDate.getTime(), start.getTime()), end.getTime())); 

let mode = state.ui.mode || 'semana';
const weeks = [
  {label:1, start:new Date('2025-10-19T12:00:00'), end:new Date('2025-10-25T12:00:00')},
  {label:2, start:new Date('2025-10-26T12:00:00'), end:new Date('2025-11-01T12:00:00')},
  {label:3, start:new Date('2025-11-02T12:00:00'), end:new Date('2025-11-08T12:00:00')},
];
let currentWeek = weeks.find(w => selectedDate>=w.start && selectedDate<=w.end) || weeks[0];

// ========== Renderiza√ß√£o Din√¢mica do Protocolo ==========
function renderProtocol() {
  const container = document.getElementById('protocol-container');
  container.innerHTML = '';

  for (const sectionKey in PROTOCOL_DATA) {
    const section = PROTOCOL_DATA[sectionKey];

    // 1. Cria a tag <section>
    const sectionEl = document.createElement('section');
    sectionEl.className = `card ${sectionKey}`;
    sectionEl.dataset.section = sectionKey;

    // 2. Cria o cabe√ßalho (band)
    const band = document.createElement('div');
    band.className = 'band';
    band.innerHTML = `${section.title} <small class="meta">${section.meta}</small>`;
    sectionEl.appendChild(band);

    // 3. Cria o corpo (inner)
    const inner = document.createElement('div');
    inner.className = 'inner';

    // 4. Cria a tabela
    const table = document.createElement('table');
    table.innerHTML = `
      <thead>
        <tr>
          <th>${sectionKey === 'omad' ? 'Item' : 'Suplemento / Medica√ß√£o'}</th>
          <th class="col-th col-dom">Dom</th><th class="col-th col-seg">Seg</th><th class="col-th col-ter">Ter</th><th class="col-th col-qua">Qua</th><th class="col-th col-qui">Qui</th><th class="col-th col-sex">Sex</th><th class="col-th col-sab">S√°b</th>
          <th class="obs">Observa√ß√£o</th>
        </tr>
      </thead>
      <tbody></tbody>
    `;
    const tbody = table.querySelector('tbody');

    // 5. Preenche as linhas da tabela (items)
    section.items.forEach(item => {
      const row = document.createElement('tr');
      let rowHtml = `<td>${item.name}</td>`;
      
      // Converte a data de in√≠cio do item para objeto Date
      const itemStartDate = item.start_date ? new Date(item.start_date + 'T12:00:00') : null;

      item.schedule.forEach((status, i) => {
        const cls = classMap[i];
        
        // Determina a data da c√©lula atual na tabela
        const cellDate = dateForWeekday(currentWeek, i);
        
        // NOVO: L√≥gica de desativa√ß√£o condicional:
        // Se a data da c√©lula √© ANTERIOR √† data de in√≠cio do item OU o status √© 0, desativa.
        const isBeforeStartDate = itemStartDate && isDateBefore(cellDate, itemStartDate);
        const isOffBySchedule = status === 0;

        if (isBeforeStartDate || isOffBySchedule) {
          rowHtml += `<td class="off col ${cls}">‚Äî</td>`;
        } else {
          // Status 1 (Ativo) ou 2 (Opcional)
          const titleAttr = item.title ? `title="${item.title}"` : '';
          rowHtml += `<td class="col ${cls}"><input type="checkbox" ${titleAttr}></td>`;
        }
      });

      rowHtml += `<td class="obs">${item.obs}</td>`;
      row.innerHTML = rowHtml;
      tbody.appendChild(row);
    });

    inner.appendChild(table);

    // 6. Adiciona a meta e notas, se existirem
    inner.innerHTML += `<div class="meta-dia">Meta: <em>${section.meta_dia}</em></div>`;
    if (section.note) {
      inner.innerHTML += `<div class="note">${section.note}</div>`;
    }

    sectionEl.appendChild(inner);
    container.appendChild(sectionEl);
  }
}

// ========== UI HEADER ==========
function fmtDate(d){ return new Intl.DateTimeFormat('pt-BR',{dateStyle:'medium', timeZone:tz}).format(d) }
function fmtDayLabel(d){ return new Intl.DateTimeFormat('pt-BR',{weekday:'long', day:'2-digit', month:'2-digit', timeZone:tz}).format(d) }
function refreshHeader(){
  const dnum = Math.floor((selectedDate - start)/msPerDay) + 1;
  document.getElementById('dnum').textContent = Math.min(Math.max(dnum,1),21);
  document.getElementById('wlabel').textContent = currentWeek.label;
  document.getElementById('modeLabel').textContent = mode==='dia' ? 'Dia' : 'Semana';
  document.getElementById('dateLabel').textContent = fmtDate(selectedDate);
  document.getElementById('todayChip').textContent = 'Hoje: ' + fmtDayLabel(now);
}

// Cabe√ßalhos das semanas com as datas certas
function applyWeekHeaders(){
  const weekStart = new Date(currentWeek.start);
  document.querySelectorAll('thead tr').forEach(tr=>{
    classMap.forEach((cls,i)=>{
      const th = tr.querySelector('.col-th.'+cls);
      if (!th) return;
      const d = new Date(weekStart.getTime()+i*msPerDay);
      const dm = new Intl.DateTimeFormat('pt-BR',{day:'2-digit', month:'2-digit', timeZone:tz}).format(d);
      th.textContent = `${weekdays[i]} (${dm})`;
    });
  });
}

// ========== Helpers de data/dia ==========
function dateForWeekday(w, weekdayIndex){ // 0..6
  return new Date(w.start.getTime() + weekdayIndex*msPerDay);
}
function weekdayIndexFromClass(td){
  const m = td.className.match(/col-(dom|seg|ter|qua|qui|sex|sab)/);
  const map = {dom:0,seg:1,ter:2,qua:3,qui:4,sex:5,sab:6};
  return m ? map[m[1]] : 0;
}

// ========== Persist√™ncia por DIA REAL ==========
function buildKeyForCheckbox(cb){
  const td = cb.closest('td');
  const row = cb.closest('tr');
  const section = cb.closest('section').dataset.section;
  const wIdx = weekdayIndexFromClass(td);
  const dateObj = dateForWeekday(currentWeek, wIdx);
  const dayISO = dateObj.toISOString().slice(0,10) + '_W' + currentWeek.label; // chave real por data e semana
  const rowLabel = (row.querySelector('td:first-child')?.textContent || 'row').trim().replace(/\s+/g,'_').slice(0,60);
  return `${dayISO}|${section}|${rowLabel}`;
}

function restoreCheckboxes(){
  document.querySelectorAll('td.col input[type=checkbox]').forEach(cb=>{
    const key = buildKeyForCheckbox(cb);
    cb.dataset.key = key;
    cb.checked = !!state.checks[key];
    cb.onchange = ()=>{
      state.checks[cb.dataset.key] = cb.checked;
      saveState(state);
      updateSummary(); updateChart();
    };
  });
}

// ========== Modo Semana/Dia ==========
function setMode(newMode){
  mode = (newMode === 'dia') ? 'dia' : 'semana';

  // NOVO: Se o modo for 'semana', force o foco para HOJE
  if (mode === 'semana') {
    selectedDate = now;
  }
  
  // ativa bot√µes de vis√£o
  document.querySelectorAll('.mode-btn').forEach(b=>b.classList.remove('active'));
  document.querySelector(`.mode-btn[data-mode="${mode}"]`)?.classList.add('active');

  // mostra/oculta carrossel do dia
  const dc = document.getElementById('dayCarousel');
  if (dc) dc.classList.toggle('hidden', mode !== 'dia');

  // garante que selectedDate esteja dentro do range e que a semana atual bata com a data
  selectedDate = new Date(Math.min(Math.max(selectedDate.getTime(), start.getTime()), end.getTime()));
  currentWeek = weeks.find(w => selectedDate>=w.start && selectedDate<=w.end) || weeks[0];
  applyWeekHeaders();
  restoreCheckboxes();

  if (mode === 'dia'){
    showOnlyDay(selectedDate);
  } else {
    showAllDays();
    highlightTodayColumn();
  }

  // persiste e atualiza UI
  state.ui.mode = mode;
  state.ui.selectedDateISO = selectedDate.toISOString();
  saveState(state);
  refreshHeader(); updateSummary(); updateChart();
}

function showOnlyDay(dateObj){
  // Ajusta semana exibida com base na data escolhida
  currentWeek = weeks.find(w => dateObj>=w.start && dateObj<=w.end) || weeks[0];
  applyWeekHeaders();
  restoreCheckboxes();

  // √≠ndice do dia (0..6) e classe correspondente
  const wIdx = dateObj.getDay();
  const keepClass = classMap[wIdx];

  // Esconde todos os THs de dia, exceto o do dia selecionado
  document.querySelectorAll('.col-th').forEach(th=> th.classList.add('hidden'));
  document.querySelectorAll(`.col-th.${keepClass}`).forEach(th=> th.classList.remove('hidden'));

  // Esconde todas as c√©lulas de dia e deixa s√≥ as do dia atual (em TODAS as se√ß√µes)
  document.querySelectorAll('td.col').forEach(td=> td.classList.add('hidden'));
  document.querySelectorAll(`td.${keepClass}`).forEach(td=> td.classList.remove('hidden'));

  // Label do carrossel
  const lbl = document.getElementById('dayLabel');
  if (lbl) lbl.textContent = fmtDayLabel(dateObj);

  // No modo dia n√£o h√° destaque ‚Äútoday‚Äù
  document.querySelectorAll('.today').forEach(el => el.classList.remove('today'));
}

function showAllDays(){
  // Mostra todas as colunas de todos os blocos
  document.querySelectorAll('.col-th').forEach(th=> th.classList.remove('hidden'));
  document.querySelectorAll('td.col').forEach(td=> td.classList.remove('hidden'));
  applyWeekHeaders();
}

function highlightTodayColumn(){
  // Limpa marcas antigas
  document.querySelectorAll('.today').forEach(el=>el.classList.remove('today'));
  // Coluna do ‚Äúhoje‚Äù (baseado em `now`, j√° normalizado)
  const idx = now.getDay();
  document.querySelectorAll('.'+classMap[idx]).forEach(td=>td.classList.add('today'));
}

// Navega√ß√£o do carrossel di√°rio (‚óÄ ‚ñ∂)
document.addEventListener('click', (e)=>{
  if (e.target.id==='prevDay'){
    const d = new Date(selectedDate.getTime() - msPerDay);
    selectedDate = new Date(Math.max(d.getTime(), start.getTime()));
    setMode('dia'); // re-render usando a nova data
  }
  if (e.target.id==='nextDay'){
    const d = new Date(selectedDate.getTime() + msPerDay);
    selectedDate = new Date(Math.min(d.getTime(), end.getTime()));
    setMode('dia');
  }
});
  
// Bot√µes de modo (Semana/Dia)
document.addEventListener('click', (e)=>{
  const btn = e.target.closest('.mode-btn');
  if (!btn) return;
  setMode(btn.dataset.mode); // 'semana' ou 'dia'
});
  
// Bot√µes de semana (Semana 1/2/3)
document.addEventListener('click', (e)=>{
  const btn = e.target.closest('.week-btn'); 
  if(!btn) return;

  // UI: ativa bot√£o clicado
  document.querySelectorAll('.week-btn').forEach(b=>b.classList.remove('active'));
  btn.classList.add('active');

  // Encontra a semana e move a selectedDate para dentro dela, se necess√°rio
  const wlabel = Number(btn.dataset.week);
  const w = weeks.find(x => x.label===wlabel) || weeks[0];
  currentWeek = w;
  if (selectedDate < w.start || selectedDate > w.end){
    selectedDate = new Date(w.start); // ancora no in√≠cio da semana
  }
    restoreCheckboxes();

  // Atualiza vis√£o conforme o modo atual
  if (mode==='dia') showOnlyDay(selectedDate);
  else { showAllDays(); highlightTodayColumn(); }

  // Persist√™ncia e UI
  state.ui.mode = mode;
  state.ui.selectedDateISO = selectedDate.toISOString();
  saveState(state);

  refreshHeader(); updateSummary(); updateChart();
  window.scrollTo({top:0, behavior:'smooth'});
});
function saveUI(){ state.ui = { mode, selectedDateISO:selectedDate.toISOString(), week: currentWeek.label }; saveState(state); }

// ========== Summary e Chart ==========
function countForSpecificDate(dateObj){
  // conta apenas checkboxes da coluna do dia (mesmo em modo semana)
  const idx = dateObj.getDay();
  const cls = classMap[idx];
  let total=0, done=0;

  // NOVO: Adiciona a verifica√ß√£o de data de in√≠cio na contagem
  for (const sectionKey in PROTOCOL_DATA) {
      const section = PROTOCOL_DATA[sectionKey];
      
      section.items.forEach(item => {
          const itemStartDate = item.start_date ? new Date(item.start_date + 'T12:00:00') : null;
          const isBeforeStartDate = itemStartDate && isDateBefore(dateObj, itemStartDate);
          
          if (item.schedule[idx] > 0 && !isBeforeStartDate) { // Se ativo no cronograma E n√£o √© antes da data de in√≠cio
              const rowLabel = (item.name || 'row').trim().replace(/\s+/g,'_').slice(0,60);
              const dayISO = dateObj.toISOString().slice(0,10) + '_W' + currentWeek.label;
              const key = `${dayISO}|${sectionKey}|${rowLabel}`;
              
              total++; 
              if (state.checks[key]) done++;
          }
      });
  }

  // O c√≥digo original fazia a contagem percorrendo o DOM (tbody tr)
  // A nova abordagem faz a contagem percorrendo o JSON (PROTOCOL_DATA) e o estado (state.checks), o que √© mais limpo e r√°pido.
  
  return {total, done};
}

function updateSummary(){
  const {total, done} = countForSpecificDate(selectedDate);
  const pct = total? Math.round(done*100/total) : 0;
  // O dashboard mostra a data da selectedDate
  document.getElementById('sumDay').textContent = fmtDayLabel(selectedDate);
  document.getElementById('doneCount').textContent = done;
  document.getElementById('totalCount').textContent = total;
  document.getElementById('pct').textContent = pct + '%';
  const fill = document.getElementById('barFill');
  fill.style.width = pct + '%';
  fill.className = pct>=85 ? 'g' : (pct>=60 ? 'y' : 'r');
}

function updateChart(){
  const weekStart = new Date(currentWeek.start);
  const chart = document.getElementById('chart');
  chart.innerHTML = '';
  
  for(let i=0;i<7;i++){
    const d = new Date(weekStart.getTime() + i*msPerDay);
    const {total, done} = countForSpecificDate(d);
    const pct = total? Math.round(done*100/total) : 0;
    
    const col = document.createElement('div'); 
    col.className='col';
    
    // Calcula a altura da barra (m√≠nimo de 3px para visibilidade)
    const barHeight = Math.max(3, Math.floor(0.8*pct)); 
    
    const bar = document.createElement('div'); 
    bar.style.height = barHeight + 'px';
    bar.className = pct>=85 ? 'g' : (pct>=60 ? 'y' : 'r'); // Adiciona cor baseada na ades√£o
    
    col.title = `${['Dom','Seg','Ter','Qua','Qui','Sex','S√°b'][i]}: ${pct}% (${done}/${total})`;
    col.appendChild(bar); 
    
    // Adiciona o destaque 'today' se a coluna for o dia de hoje
    if (d.toISOString().slice(0,10) === now.toISOString().slice(0,10)) {
        col.classList.add('today');
    }
    
    chart.appendChild(col);
  }
}

// ========== INTEGRA√á√ÉO GEMINI (NOVO) ==========

// Fun√ß√£o placeholder que simula a chamada √† IA
function requestGeminiSuggestion() {
    alert('Fun√ß√£o de chamada da IA em constru√ß√£o. Capturando restri√ß√µes para OMAD...');
    
    // 1. Captura as restri√ß√µes OMAD do dia selecionado
    const selectedDayIndex = selectedDate.getDay();
    const omadData = PROTOCOL_DATA.omad.items;
    
    let restrictions = [];
    omadData.forEach(item => {
        if (item.schedule[selectedDayIndex] > 0) { // Se for ativo ou opcional (1 ou 2)
            restrictions.push(item.name + ': ' + item.obs.replace(/<[^>]*>?/gm, '')); // Remove tags HTML
        }
    });

    const prompt = `Gere uma receita de refei√ß√£o √∫nica (OMAD) para um doutor em nutrologia. A refei√ß√£o deve ser baseada nas seguintes restri√ß√µes do protocolo (Hoje: ${weekdays[selectedDayIndex]}): ${restrictions.join('; ')}. O foco √© anabolismo limpo, cetose e densidade nutricional. Retorne a resposta em portugu√™s, em formato de receita (Nome, Ingredientes, Modo de Preparo e An√°lise Nutricional Breve).`;
    
    console.log("PROMPT ENVIADO PARA GEMINI:\n", prompt);
    
    // Futuramente, esta fun√ß√£o far√° uma chamada 'fetch' para um endpoint (API Gateway/Cloud Function)
    // que, por sua vez, chamar√° a API do Google AI Studio/Gemini com o 'prompt'.
    
    // Por enquanto, mostramos apenas o prompt na tela:
    document.getElementById('protocol-container').innerHTML = `
        <section class="card avancado">
            <div class="band">üß† Sugest√£o Gemini</div>
            <div class="inner">
                <p><strong>Status:</strong> Enviando solicita√ß√£o para o Gemini...</p>
                <p><strong>Restri√ß√µes Capturadas:</strong> ${restrictions.join('; ')}</p>
                <p><strong>Prompt Gerado:</strong> <em>${prompt}</em></p>
                <p>‚ö†Ô∏è O pr√≥ximo passo √© construir o backend que responder√° a este prompt.</p>
                <button class="btn" onclick="restoreAll()">Voltar ao Guia Di√°rio</button>
            </div>
        </section>
    ` + document.getElementById('protocol-container').innerHTML;

    // Esconde o bot√£o ap√≥s a execu√ß√£o
    document.getElementById('generateRecipeBtn').classList.add('hidden');
}


// ========== Restore / Reset / Export / Import ==========
function restoreAll(){
  // Chama o renderProtocol() novamente para ter certeza que a estrutura est√° no DOM
  renderProtocol(); 
  
  restoreCheckboxes();
  refreshHeader();
  applyWeekHeaders();
  
  // Condi√ß√£o para mostrar o dia (se modo dia) ou todos (se modo semana)
  (mode==='dia') ? showOnlyDay(selectedDate) : showAllDays();

  // Destaque do dia atual (HOJE)
  highlightTodayColumn(); 
  
  // Garante que o bot√£o de IA siga a l√≥gica do modo
  document.getElementById('generateRecipeBtn')?.classList.toggle('hidden', mode !== 'dia'); 

  updateSummary(); 
  updateChart();
}

document.getElementById('resetBtn').onclick = ()=>{
  if(confirm('Deseja limpar TODAS as marca√ß√µes deste ciclo?')){
    state.checks = {}; saveState(state);
    document.querySelectorAll('td.col input[type=checkbox]').forEach(cb => cb.checked = false);
    updateSummary(); updateChart();
  }
};

// ========== PWA ==========
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => { navigator.serviceWorker.register('./sw.js').catch(()=>{}); });
}
let deferredPrompt=null;
const installBtn=document.getElementById('installBtn');
window.addEventListener('beforeinstallprompt', (e)=>{
  e.preventDefault(); deferredPrompt=e; installBtn.style.display='inline-block';
});
installBtn?.addEventListener('click', async ()=>{
  if(!deferredPrompt) return; deferredPrompt.prompt(); await deferredPrompt.userChoice;
  deferredPrompt=null; installBtn.style.display='none';
});

// ========== SYNC SUPABASE (Upsert sem erro de duplicidade) ==========
// Estrutura da tabela esperada:
// create table public.daily_state (
//   profile_id text not null,
//   day date not null,
//   state jsonb not null,
//   updated_at timestamptz default now(),
//   primary key (profile_id, day)
// );
const syncStatus = document.getElementById('syncStatus');
function isoToday(){ const d = new Date(); d.setHours(12,0,0,0); return d.toISOString().slice(0,10); }

// Captura TUDO deste app (um namespace s√≥)
function collectAppState(){
  return { ...state }; // suficiente (checks + ui)
}
function applyAppState(s){
  if(!s) return;
  state = s; saveState(state);
  restoreAll();
}

// Bot√µes ‚ÄúSync ‚Üë/‚Üì‚Äù visuais (opcionais)
(function addSyncButtons(){
  const bar=document.createElement('div');
  Object.assign(bar.style,{position:'fixed',top:'10px',right:'10px',zIndex:'9999',display:'flex',gap:'8px'});
  const b1=document.createElement('button'); b1.textContent='Sync ‚Üë'; b1.title='Salvar na nuvem';
  Object.assign(b1.style,{padding:'6px 10px',borderRadius:'8px',border:'1px solid #f0f9ff'});
  const b2=document.createElement('button'); b2.textContent='Sync ‚Üì'; b2.title='Baixar da nuvem';
  Object.assign(b2.style,{padding:'6px 10px',borderRadius:'8px',border:'1px solid #ccc',background:'#f6ffed'});
  b1.onclick = syncUp; b2.onclick = syncDown; bar.append(b1,b2); document.body.append(bar);
})();

async function syncUp(){
  try{
    const day = isoToday();
    const payload = { profile_id: PROFILE_ID, day, state: collectAppState(), updated_at: new Date().toISOString() };
    const { error } = await sb.from('daily_state')
      .upsert(payload, { onConflict: 'profile_id,day' });
    if (error) throw error;
    syncStatus.textContent = '‚úÖ Salvo ('+day+')';
  }catch(err){
    syncStatus.textContent = '‚ùå Sync falhou';
    alert('Falha ao salvar (Sync ‚Üë): ' + (err?.message||err));
  }
}

async function syncDown(){
  try{
    const day = isoToday();
    const { data, error } = await sb.from('daily_state')
      .select('state').eq('profile_id', PROFILE_ID).eq('day', day).maybeSingle();
    if (error) throw error;
    if (!data){ syncStatus.textContent='‚ö†Ô∏è Sem dados '+day; alert('Nenhum dado encontrado para '+day); return; }
    applyAppState(data.state);
    syncStatus.textContent='‚úÖ Carregado ('+day+')';
  }catch(err){
    syncStatus.textContent='‚ùå Sync falhou';
    alert('Falha ao carregar (Sync ‚Üì): ' + (err?.message||err));
  }
}
// Bot√£o "Sincronizar Agora" (salva ‚Üë e baixa ‚Üì em sequ√™ncia)
document.getElementById('syncNowBtn')?.addEventListener('click', async () => {
  const el = document.getElementById('syncStatus');
  try {
    if (el) el.textContent = '‚è≥ Sincronizando...';
    await syncUp();    // salva o estado local na nuvem
    await syncDown();  // l√™ de volta (garante converg√™ncia)
    if (el) el.textContent = '‚úÖ Sincronizado';
  } catch (e) {
    if (el) el.textContent = '‚ùå Erro na sincroniza√ß√£o';
  }
});
// ========== Inicializa√ß√£o ==========
(function init(){
  // NOVO: Renderiza as tabelas antes de restaurar o estado
  renderProtocol();
  
  // semana ativa no topo
  document.querySelector(`.week-btn[data-week="${weeks.findIndex(w=>selectedDate>=w.start&&selectedDate<=w.end)+1}"]`)?.classList.add('active');
  restoreAll();
  // modo inicial
  setMode(mode);
})();
</script>
</body>
</html>
